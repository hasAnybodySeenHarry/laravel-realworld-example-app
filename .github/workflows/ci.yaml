name: Main CI

on:
  push:
    branches:
    - "**"
  pull_request:
    branches:
    - "main"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.3'
        extensions: pdo_mysql
        coverage: none

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install dependencies
      run: composer install -q --no-ansi --no-interaction --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Grant dir permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Run tests
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test --testsuite=Feature --env=local

  containerize:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      IMAGE: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.repository }}
      TAG: latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.docker_username }}
        password: ${{ secrets.docker_password }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build the image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: true
        tags: |
          ${{ env.IMAGE }}:${{ env.TAG }}

    - name: Get image digest
      id: digest
      run: |
        DIGEST=$(docker buildx imagetools inspect ${{ env.IMAGE }}:${{ env.TAG }} --format '{{ .Digest }}')
        echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Import Cosign key
      run: echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key

    - name: Install Syft
      uses: anchore/sbom-action/download-syft@v0.15.4

    - name: Generate CycloneDX SBOM
      run: |
        syft scan ${{ env.IMAGE }}@${{ steps.digest.outputs.digest }} -o cyclonedx-json > sbom.cdx.json

    - name: Sign image
      run: |
        COSIGN_PASSWORD="${{ secrets.COSIGN_PASSWORD }}" \
        cosign sign --key cosign.key ${{ env.IMAGE }}@${{ steps.digest.outputs.digest }}

    - name: Attest SBOM
      run: |
        COSIGN_PASSWORD="${{ secrets.COSIGN_PASSWORD }}" \
        cosign attest --key cosign.key \
          --predicate sbom.cdx.json \
          --type cyclonedx \
          ${{ env.IMAGE }}@${{ steps.digest.outputs.digest }}

    - name: Verify Signature
      run: |
        COSIGN_PASSWORD="${{ secrets.COSIGN_PASSWORD }}" \
        cosign verify --key cosign.key ${{ env.IMAGE }}@${{ steps.digest.outputs.digest }}

    - name: Verify Attestation
      run: |
        COSIGN_PASSWORD="${{ secrets.COSIGN_PASSWORD }}" \
        cosign verify-attestation \
          --key cosign.key \
          --type cyclonedx \
          ${{ env.IMAGE }}@${{ steps.digest.outputs.digest }}
