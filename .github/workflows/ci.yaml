name: Main CI

on:
  push:
    branches:
    - "**"
  pull_request:
    branches:
    - "main"

jobs:
  unittest:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.3'
        extensions: pdo_mysql
        coverage: none

    - name: Copy .env
      run: php -r "file_exists('.env') || copy('.env.example', '.env');"

    - name: Install dependencies
      run: composer install -q --no-ansi --no-interaction --no-progress --prefer-dist

    - name: Generate key
      run: php artisan key:generate

    - name: Grant dir permissions
      run: chmod -R 777 storage bootstrap/cache

    - name: Create database
      run: |
        mkdir -p database
        touch database/database.sqlite

    - name: Run tests
      env:
        DB_CONNECTION: sqlite
        DB_DATABASE: database/database.sqlite
      run: php artisan test --testsuite=Feature --env=local

  livetest:
    needs: unittest
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        ports:
        - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: app_db
          MYSQL_USER: app_user
          MYSQL_PASSWORD: secret_pass
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@15c43e89cdef867065b0213be354c2841860869e
      with:
        php-version: '8.3'
        extensions: pdo_mysql
        coverage: none
      
    - name: Prepare for bootstrapping
      env:
        DB_CONNECTION: mysql
        DB_HOST: 127.0.0.1
        DB_PORT: 3306
        DB_DATABASE: app_db
        DB_USERNAME: app_user
        DB_PASSWORD: secret_pass
      run: |
        composer install -q --no-ansi --no-interaction --no-progress --no-dev --prefer-dist --optimize-autoloader
        mkdir -p storage bootstrap/cache \
          && chown -R www-data:www-data /var/www \
          && chmod -R 775 /var/www/storage /var/www/bootstrap/cache
        head -n -2 entrypoint.sh > tmp.sh && mv tmp.sh entrypoint.sh
        chmod +x ./entrypoint.sh
        ./entrypoint.sh

    - name: Start Laravel dev server
      run: php artisan serve --host=127.0.0.1 --port=8000 &

    - name: Test api /users
      run: |
        curl --fail -X POST http://127.0.0.1:8000/api/users \
          -H "Content-Type: application/json" \
          -d '{
            "user": {
              "email": "janedoe@example.com",
              "password": "password123",
              "username": "janedoe"
            }
          }' | jq

  containerize:
    needs: livetest
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write

    env:
      IMAGE: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
      TAG: latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        registry: docker.io
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build the image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: true
        tags: |
          ${{ env.IMAGE }}:${{ env.TAG }}

    - name: Pull image
      run: docker pull ${{ env.IMAGE }}:${{ env.TAG }}

    - name: Get image digest
      id: digest
      run: |
        DIGEST=$(docker inspect --format "{{index .RepoDigests 0}}" ${{ env.IMAGE }}:${{ env.TAG }})
        echo "digest=${DIGEST}" >> "$GITHUB_OUTPUT"

    - name: Install Cosign
      uses: sigstore/cosign-installer@v3

    - name: Install Syft
      uses: anchore/sbom-action/download-syft@v0.15.4

    - name: Generate CycloneDX SBOM
      run: |
        syft scan ${{ steps.digest.outputs.digest }} -o cyclonedx-json > sbom.cdx.json

    - name: Sign image
      run: |
        cosign sign --yes ${{ steps.digest.outputs.digest }}

    - name: Attest SBOM
      run: |
        cosign attest --yes \
          --predicate sbom.cdx.json \
          --type cyclonedx \
          ${{ steps.digest.outputs.digest }}

    - name: Verify Signature
      run: |
        cosign verify \
          --certificate-identity-regexp "https://github\.com/hasAnybodySeenHarry/laravel-realworld-example-app/.github/workflows/ci.yaml@.*" \
          ${{ steps.digest.outputs.digest }}

    - name: Verify Attestation
      run: |
        cosign verify-attestation \
          --type cyclonedx \
          ${{ steps.digest.outputs.digest }}